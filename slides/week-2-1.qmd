---
title: "Week 2"
subtitle: "Features, Projections, Measures"
format:
  revealjs: 
    smaller: true 
    logo: ../csu-rams-logo.png
    slide-number: c/t
    footer: "[ESS 523c: Environmental Data Science Applications: Water Resources](https://github.com/mikejohnson51/csu-ess-523c/)"
    include-before-body: header.html
    include-after-body: footer-annotations.html
    theme: [default, csu-css.scss]
    highlightStyle: github
    highlightLines: true
    width: 1600
    height: 720
    countIncrementalSlides: false
    incremental: false
    title-slide-attributes:
      data-background-color: "#1E4D2B"
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
---

```{r, include = F}
knitr::opts_chunk$set(fig.width = 6, message = TRUE, warning = FALSE, comment = "", cache = FALSE, fig.retina = 3)

library(tidyverse)
library(sf)
library(flipbookr)

co <- AOI::aoi_get(state = "CO", county = "all") |> 
  select(geoid = fip_code, name, aland = land_area, state_nm = state_name)
```

## Simple Features

```{r, echo = FALSE, fig.align="center", out.width="75%"}
knitr::include_graphics("images/09-sf-model.png")
```

## Todays Data:

```{r, echo = FALSE}
co
```


## Simple Features 

- Simple feature geometries describe the geometries of `features.` 

- The main application of simple feature geometries is to describe 2D geometries as `points`, `lines`, or `polygons`.

- “simple” refers to the fact that line or polygon geometries are represented by set of points connected with straight lines.

- Simple features access is a standard (Herring 2011, Herring (2010), ISO (2004)) for describing simple feature geometries via:

  1. a class hierarchy
  
  2. a set of operations
  
  3. binary and text encodings


## Simple Features Access

- [Simple features](https://en.wikipedia.org/wiki/Simple_Features) or [_simple feature access_](http://www.opengeospatial.org/standards/sfa) refers to the formal standard (ISO 19125-1:2004) describing how objects in the real world can be represented in computers, with emphasis on the _spatial_ geometry of these objects. 

- It also describes how objects can be stored in and retrieved from databases, and which geometrical operations should/can be defined for them.

- The standard is widely implemented in spatial databases (such as PostGIS), commercial GIS (e.g., [ESRI ArcGIS](http://www.esri.com/)) and forms the vector data basis for libraries such as [GDAL](http://www.gdal.org/). 

- A subset of simple features (e.g. the **big 7**) forms the [GeoJSON](http://geojson.org/) specification.

-  R has well-supported classes for storing spatial data ([sp](https://CRAN.R-project.org/package=sp)) and interfacing to the above mentioned environments ([rgdal](https://CRAN.R-project.org/package=rgdal), [rgeos](https://CRAN.R-project.org/package=rgeos)), but has so far lacked a complete implementation of simple features, making conversions at times convoluted, inefficient or incomplete. 

- [sf](http://github.com/r-spatial/sf) is seeking to fill this gap and has/will succeed [sp](https://CRAN.R-project.org/package=sp)

## So what is a feature?

- A feature is a thing (object) in the real world, such as a building or a river 

- They often consist of other objects. 

  - A river system can be a feature, a river can be a feature, a river outlet can be a feature.

  - A image pixel can be a feature, and the image can be a feature...

## Spatial Features

- The standard says: "_A simple feature is defined by the OpenGIS Abstract specification to have both **spatial** and **non-spatial** attributes. Spatial attributes are geometry valued, and simple features are based on 2D geometry with linear interpolation between vertices._"  - [standard](http://www.opengeospatial.org/standards/sfa).

- Spatial Features have a _geometry_ describing _where_  the feature is located and _how_ it is represented.

```{r}
str(co$geometry)
```

- The geometry of a river can be its watershed, of its mainstem, or the point it drains to (see the OGC [HY_Feature](https://docs.opengeospatial.org/is/14-111r6/14-111r6.html) standard) 
- Features can have attributes describing other properties of the feature 

- Other properties may include its length, slope, stream order or average flowrate

## Geometry types

The following 7 simple feature types are the most common, and are the only ones used for [GeoJSON](https://tools.ietf.org/html/rfc7946):

*****

| SINGLE | Description                                        |
| ---- | -------------------------------------------------- |
| `POINT` | zero-dimensional geometry containing a single point |
| `LINESTRING` | sequence of points connected by straight, non-self intersecting line pieces; one-dimensional geometry |
| `POLYGON` | geometry with a positive area (two-dimensional); sequence of points form a closed, non-self intersecting ring; the first ring denotes the exterior ring, zero or more subsequent rings denote holes in this exterior ring |

****

| MULTI (same typed) | Description                                        |
| ---- | -------------------------------------------------- |
| `MULTIPOINT` | set of points; a MULTIPOINT is simple if no two Points in the MULTIPOINT are equal |
| `MULTILINESTRING` | set of linestrings |
| `MULTIPOLYGON` | set of polygons |

****

| Multi-Typed | Description                                        |
| ---- | -------------------------------------------------- |
| `GEOMETRYCOLLECTION` | set of geometries of any type except GEOMETRYCOLLECTION |

****

- The descriptions above were copied from the [PostGIS manual](http://postgis.net/docs/using_postgis_dbmanagement.html).

The remaining geometries 10 are rarer, but increasingly find implementations:

****

| type | description                                        |
| ---- | -------------------------------------------------- |
| `CIRCULARSTRING` | The CIRCULARSTRING is the basic curve type, similar to a LINESTRING in the linear world. A single segment requires three points, the start and end points (first and third) and any other point on the arc. The exception to this is for a closed circle, where the start and end points are the same. In this case the second point MUST be the center of the arc, i.e., the opposite side of the circle. To chain arcs together, the last point of the previous arc becomes the first point of the next arc, just like in LINESTRING. This means that a valid circular string must have an odd number of points greater than 1. |
| `COMPOUNDCURVE` | A compound curve is a single, continuous curve that has both curved (circular) segments and linear segments. That means that in addition to having well-formed components, the end point of every component (except the last) must be coincident with the start point of the following component. |
| `CURVEPOLYGON` | Example compound curve in a curve polygon: CURVEPOLYGON(COMPOUNDCURVE(CIRCULARSTRING(0 0,2 0, 2 1, 2 3, 4 3),(4 3, 4 5, 1 4, 0 0)), CIRCULARSTRING(1.7 1, 1.4 0.4, 1.6 0.4, 1.6 0.5, 1.7 1) ) |
| `MULTICURVE` |  A MultiCurve is a 1-dimensional GeometryCollection whose elements are Curves, it can include linear strings, circular strings or compound strings.  |
| `MULTISURFACE` | A MultiSurface is a 2-dimensional GeometryCollection whose elements are Surfaces, all using coordinates from the same coordinate reference system. |
| `CURVE` | A Curve is a 1-dimensional geometric object usually stored as a sequence of Points, with the subtype of Curve specifying the form of the interpolation between Points |
| `SURFACE` | A Surface is a 2-dimensional geometric object |
| `POLYHEDRALSURFACE` | A PolyhedralSurface is a contiguous collection of polygons, which share common boundary segments  |
| `TIN` | A TIN (triangulated irregular network) is a PolyhedralSurface consisting only of Triangle patches.|
| `TRIANGLE` | A Triangle is a polygon with 3 distinct, non-collinear vertices and no interior boundary |

****

## Dimensions

**All** geometries are composed of `points` 


  - Points are defined by coordinates in a 2-, 3- or 4-D space.  

  - In addition to XY coordinates, there are two optional dimensions:

  * a Z coordinate, denoting altitude
  * an M coordinate (rarely used), denoting some _measure_ 

  - The `M` describes  a property of the vertex that is *independent* of the feature. 

  - It sounds attractive to encode a time as M, however these quickly become invalid once the path self-intersects.

  - Both Z and M are found relatively **rarely**, and software support to do something useful with them is rarer still.

## Valid geometries

Valid geometries obey the following properties:

  - `LINESTRINGS` shall not self-intersect
  
  - `POLYGON` rings shall be closed (last point = first point)
  
  - `POLYGON` holes (inner rings) shall be inside their exterior ring
  
  - `POLYGON` inner rings shall maximally touch the exterior ring in single points, not over a line
  
  - `POLYGON` rings shall not repeat their own path
  
If any of the above is **not** the case, the geometry is not valid.

## Non-simple and non-valid geometries

`st_is_simple` and `st_is_valid` provide methods to help detect non-simple and non-valid geometries:

- An example of a non-simple geometries is a self-intersecting lines;

```{r}
(x1 <- st_linestring(cbind(c(0,1,0,1),c(0,1,1,0))))
st_is_simple(x1)
```

```{r echo=FALSE,fig=TRUE,out.width="20%", fig.align="center"}
opar <- par(mfrow = c(1,1))
par(mar=c(1,1,4,1))
plot(st_sfc(x1), type = 'b', axes = FALSE, xlab = NULL, ylab = NULL)
title(st_as_text(x1))
par(opar)
```

- An example of a non-valid geometry are would be a polygon with slivers or self-intersections.

```{r}
(x2 <- st_polygon(list(cbind(c(0,1,1,1,0,0),c(0,0,1,0.6,1,0)))))
(x3 <- st_polygon(list(cbind(c(0,1,0,1,0),c(0,1,1,0,0)))))

st_is_valid(c(x2,x3))
```

```{r echo=FALSE,fig=TRUE,out.width="20%", fig.align="center"}
opar <- par(mfrow = c(2,1))
par(mar=c(1,1,4,1))
plot(st_sfc(st_linestring((cbind(c(0,1,1,1,0,0),c(0,0,1,0.6,1,0))))), type='b', axes = FALSE)
title(st_as_text(x2))
plot(st_sfc(st_linestring(cbind(c(0,1,0,1,0),c(0,1,1,0,0)))), type = 'b', axes=F, xlab=NULL,ylab=NULL)
title(st_as_text(x3))
par(opar)
```


## Empty Geometries

- An important concept in the feature geometry framework is the `empty` geometry.

- `empty` geometries serve similar purposes as NA values in vectors (placeholder)

- Empty geometries arise naturally from geometrical operations, for instance:

```{r, message=TRUE}
(e = st_intersection(st_point(c(0,0)), st_point(c(1,1))))
```

- It is not entirely clear what the benefit is of having `typed` empty geometries, but according to the simple feature standard they are type so the `sf` package abides by that.

- Empty geometries can be detected by:

```{r}
st_is_empty(e)
```

## So:

  - There are 17 typed geometries supported by the simple feature standard
  - All geometries are made up of points
  - points can exist in 2,3,4 Dinimsonal space
  - `LINESTRING` and `POLYGON` geometries have rules that define validity
  - Geometries can be empty (but are still typed)

# Well-known Text, Well-known Binary

## WKT and WKB

The simple feature standard includes two encodings: 

Well-known text (WKT) & well-known binary (WKB) 

`Well Known Text` is human-readable:

```{r}
x <- st_linestring(matrix(10:1,5))
st_as_text(x)
```

In this example, 

The word `LINESTRING` provides the geometry *type* which is followed by a parentheses, inside the parentheses are the `points` that make up the geometry.

Separate points are separated by a "comma", while the point coordinates are separated by a "space."

Coordinates are usually floating point numbers, and moving large amounts of information as text is slow and imprecise. 

For that reason, we use well-known binary (WKB) encoding

```{r}
x
st_as_binary(x)
```

- Binary conversion is used to communicate geometries to external libraries (GDAL, GEOS, liblwgeom) and spatial databases because it is fast and lossless. 

- WKT and WKB can both be transformed back into R native objects by

```{r, message = TRUE}
st_as_sfc("LINESTRING(10 5, 9 4, 8 3, 7 2, 6 1)")[[1]]
st_as_sfc(structure(list(st_as_binary(x)), class = "WKB"))[[1]]
```

Conversion between R native objects and WKB is done by package `sf` in compiled (C++/Rcpp) code, making this a reusable and fast route for I/O of simple feature geometries in R.

## How simple features are organized in R?

- Simple Features is a standard that is implemented in R (not limited to R)

- So far we have discusses simple features the _standard_, rather then simple features the _implementation_

- In R, simple features are implemented using standard data *structures* (S3 classes, lists, matrix, vector).  

- Attributes are  stored in `data.frames` (or `tbl_df`)

- Feature geometries are stored in a `data.frame` column. 

- Since geometries are not single-valued, they are put in a `list-column`

- This means each observation (element) is a list itself!

Remember our nested lists?

```{r}
list(list(c(1:5)))
```
  
# sfg --> sfc --> sf

## sf, sfc, sfg

The three classes are used to represent simple feature obejcts are:

* `sf`: `data.frame` with feature attributes and geometries

which is composed of

* `sfc`: the `list-column` with the geometries for each feature

which is composed of

* `sfg`, individual simple feature geometries

## sf, sfc, sfg

```{r, echo = FALSE, out.width = "75%", fig.align="center"}
knitr::include_graphics("images/10-sf-diagram.png")
```

In the output we see:

* in green a simple feature: a single **record** (row, consisting of attributes and geometry
* in blue a single simple feature **geometry** (an object of class `sfg`)
* in red a simple feature list-column (an object of class `sfc`, which is a column in the `data.frame`)

Even though geometries are native R objects, they are printed as **well-known text**

## `sfg`: simple feature geometry (blue)

```{r, echo = FALSE, out.width = "35%", fig.align="center"}
knitr::include_graphics("images/10-sf-diagram.png")
```

- Simple feature geometry (`sfg`) objects carry the geometry for a single feature

- Simple feature geometries are implemented as R native data, using the following rules

  1. a single POINT is a numeric vector

  2. a set of points (e.g. in a LINESTRING or ring of a POLYGON) is a `matrix`, each row containing a point

  3. any other set is a `list`

    - list of numeric matrices for `MULTILINESTRING` and `POLYGON`
    - list of lists of numeric matrices for `MULTIPOLYGON`
    - list of (typed) geometries for `GEOMETRYCOLLECTION`

## `sfg`: simple feature geometry

Creator functions are **rarely** used in practice, since we typically read existing spatial data. But, they are useful for illustration:

```{r}
(x <- st_point(c(1,2)))
str(x)
(x <- st_linestring(matrix(c(1,2,3,4), ncol=2)))
str(x)
```

## `sfg`: simple feature geometry

All geometry objects have a S3 class indicating their (1) dimension, (2) type, and (3) superclass

```{r}
(pt = st_point(c(0,1)))
attributes(pt)

(pt2 = st_point(c(0,1,4)))
attributes(pt2)
```

## `sfg`: simple feature geometry

::: columns
::: {.column width="50%"}
```{r}
(m1 = rbind(c(8, 1), c(2, 5), c(3, 2)))

(mp = st_multipoint(m1))
attributes(mp)
```
:::
::: {.column width="50%"}
```{r}
(ls = st_linestring(m1))
attributes(ls)
```
:::
:::

## `sfg`: simple feature geometry

Although these geometries contain the same `points` (m1), they have entirely different meaning: the point set is a zero-dimensional, the line a one-dimensional geometry:

Here, dimensions is no the XY vs XYZ, but rather whether the geometry has length (1D) or area (2D) or greater...

```{r}
st_dimension(mp)
st_length(mp)
st_dimension(ls)
st_length(ls)
```

## GEOMETRYCOLLECTION 

- Single features can have a geometry that consists of several geometries of different types.

- Such cases arise rather naturally when looking for intersections. For instance, the intersection of two LINESTRING geometries may be the combination of a `LINESTRING` and a `POINT.` 

- Putting this intersection into a single feature geometry needs a `GEOMETRYCOLLECTION`

```{r}
pt <- st_point(c(1, 0))
ls <- st_linestring(matrix(c(4, 3, 0, 0), ncol = 2))
poly1 <- st_polygon(list(matrix(c(5.5, 7, 7, 6, 5.5, 0, 0, -0.5, -0.5, 0), ncol = 2)))
poly2 <- st_polygon(list(matrix(c(6.6, 8, 8, 7, 6.6, 1, 1, 1.5, 1.5, 1), ncol = 2)))
multipoly <- st_multipolygon(list(poly1, poly2))

(j <- st_geometrycollection(list(pt, ls, poly1, poly2, multipoly)))
```

- In case we end up with `GEOMETRYCOLLECTION` objects, the next question is often what to do with them. One thing we can do is extract elements from them:

```{r}
st_collection_extract(j, "POLYGON")

st_collection_extract(j, "POINT")

st_collection_extract(j, "LINESTRING")
```

# Conversion between geometry types

We can convert simple feature geometries using the `st_cast` generic (up to the extent that a conversion is feasible):

```{r}
methods(st_cast)
```

Lets take the Santa Barbara County in our California sf object:

```{r}
(co1 = co$geometry[[35]])
(co_ls = st_cast(co1, "MULTILINESTRING"))
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
par(mar=c(1,1,1,1))
plot(co1, col = "red")
title("MULITPOLGYGON")
plot(co_ls, col = "red")
title("MULITLINESTRING")
```

It is often convenient to analyze the the points that make up a `LINESTRING` However,

```{r, warning=TRUE}
rbind(c(0,0), c(1,1), c(1,0), c(0,1)) |> 
  st_linestring() |> 
  st_cast("POINT")
```

does not what we expect, because it will convert a **single** geometry into a new **single** geometry (one line to one point)

Instead, we must recognize that a collection of points is what defines a `LINSETRING` and a collection of of `POINT`, operating as a single unit, is a `MULTIPOINT`

```{r}
rbind(c(0,0), c(1,1), c(1,0), c(0,1)) |> 
  st_linestring() |> 
  st_cast("MULTIPOINT")
```

If we really wanted the individual `POINT` geometries, we need to work with sets:

```{r}
(p <- rbind(c(0,0), c(1,1), c(1,0), c(0,1)) |> 
   st_linestring() |> 
   st_sfc() |> #<<
   st_cast("POINT"))
```

##  `sfc`: sets of geometries

- `sf` provides a dedicated class for handeling geometry sets, called `sfc` (simple feature geometry list column). 

- We can create such a list column with constructor function `st_sfc`:

```{r}
(sfc = st_sfc(st_point(c(0,1)), st_point(c(-3,2))))
```

The default report from the print method for sfc gives

- the number of features geometries
- the feature geometry type (here: POINT)
- the feature geometry dimension (here: XY)
- the bounding box for the set
- the coordinate reference system for the set (epsg and proj4string)
- the first few geometries, as (abbreviated) WKT

The class of the geometry `list-column` is a combination of a specific class, and a superclass. 

```{r}
class(sfc)
```

In addition to a class, the `sfc` object has further attributes (remember S3 class!)

```{r}
attributes(sfc) |> names()
```

which are used to record for the whole set:

- a precision value
- the bounding box enclosing all geometries (for x and y)
- a coordinate reference system
- the number of empty geometries contained in the set


This means that all these properties are defined for the set (sfc), and not for geometries (sfg) individually.

`sfc` objects are lists with each entry being an sfg object:

```{r}
p[[2]]
```

and we will use these lists as _list columns_ in `data.frame` or `tibble` objects to represent simple features with geometries in a list column.

`r flipbookr::chunq_reveal("set", title = "Sets of geometries arise when we separate compound geometries: ", widths = c(40,60,0))`

```{r set, include = FALSE, warning = TRUE}
rbind(c(0,0), c(1,1), c(1,0), c(0,1)) |>
   st_linestring() |> 
   st_sfc() |> 
   st_cast("POINT") -> 
  p


rbind(c(0,0), c(1,1), c(1,0), c(0,1)) |>
   st_linestring() |> 
   st_cast("POINT") 
```

- On the last slide, `st_sfc` creates a set of _one_ `LINESTRING` (p), with a size of 4.

- Going the other way around (from set to feature), we need to _combine_ geometries:

::: columns
::: {.column width="50%"}
```{r}
p
```
:::
::: {.column width="50%"}
```{r}
st_combine(p)
```
:::
:::

## Casting must be done the level of the feature

If we want to go from the 4 feature (p) object to a 1 feature LINESTRING, we must combine before casting ...

```{r}
st_combine(p) |> 
  st_cast("LINESTRING")
```

# Disolving Geometries 

Combining geometries **preserves** their interior boundaries, unioning **resolves/dissolves** the internal boundaries:

::: columns
::: {.column width="50%"}
```{r}
(co_geom = co$geometry)
```
:::
::: {.column width="50%"}
```{r}
plot(co_geom)
```
:::
:::

--- 

::: columns
::: {.column width="50%"}
```{r}
(co_c = st_combine(co_geom) )
(co_u = st_union(co_geom) )
```
:::
::: {.column width="50%"}
```{r}
(co_c_ml = st_combine(co_geom) |> 
   st_cast("MULTILINESTRING"))
(co_u_ml = st_union(co_geom)  |> 
    st_cast("MULTILINESTRING"))
```
:::
:::

```{r, echo = F, fig.align='center'}
par(mfrow = c(2,2))
par(mar=c(1,1,1,1))
plot(co_c, col = "red", main = "st_combine")
plot(co_u, col = "red", main = "st_union")
plot(co_c_ml, col = "red", main = "st_combine / st_cast")
plot(co_u_ml, col = "red", main = "st_union / st_cast")
```

## Mixed geometries

Sets of simple features also consist of features with heterogeneous geometries. In this case, the geometry type of the set is `GEOMETRY`:

.pull-left[
```{r}
(g = st_sfc(st_point(c(0,0)), 
            st_linestring(rbind(c(0,0), c(1,1)))))
```
]

.pull-right[
These set can be filtered by using `st_is`

```{r}
g |> st_is("LINESTRING")
```

or, when working with sf objects,

```{r}
# Note need of %>%
st_sf(g) %>%
  filter(st_is(., "LINESTRING"))
```

]

## `sf`: objects with simple features

Simple features `geometries` and feature `attributes` are put together in `sf` (simple feature) objects.  

```{r}
co
```

This `sf` object is of class

```{r}
class(co)
```

meaning it extends `data.frame`, but with a single list-column with geometries, which is held in the column named:

```{r}
attr(co, "sf_column")
```

---

## sfc: simple feature geometry list-column

The column in the `sf` `data.frame` that contains the geometries is a list, of class `sfc`.

We can retrieve the geometry list-column as we would any data.frame column (e.g. `ca$geometry`), or more generally with `st_geometry`:

```{r}
(co_geom <- st_geometry(co))
```

Geometries are printed in abbreviated form, but we can view a complete geometry by selecting it:

```{r}
co_geom[[1]]
```

---

## Reading and writing

As we've seen above, reading spatial data from an external file can be done via `sf`
  - reading data requires the "parser function" and the file path

```{r, eval = FALSE}
co <- st_read("data/co.shp")
```

we can suppress the output by adding argument `quiet=TRUE` or by using the otherwise nearly identical but more quiet

```{r, eval = TRUE}
ca <- read_sf("data/co.shp")
```

Writing takes place in the same fashion, using `st_write`:

```{r, eval = FALSE}
st_write(co, "data/co.shp")
```

or its quiet alternative that silently overwrites existing files by default,

```{r, eval = FALSE}
write_sf(co, "co.shp") # silently overwrites
```

---

## From Tables (e.g. CSV)

Spatial data can also be created from CSV and other flat files once it is in R:

```{r,message=FALSE}
(cities = readr::read_csv("../labs/data/uscities.csv") |> 
  select(city, state_name, county_name, population, lat, lng) )
```

---

To do this, you must specify the `X` and the `Y` coordinate columns as well as a CRS:

- A typical lat/long CRS is EPSG:4326

```{r}
(cities_sf = st_as_sf(cities, coords = c("lng", "lat"), crs = 4326))
```

## Data Manipulation

Since `sf` objects are `data.frames`, our `dplyr` verbs work!

Lets find the most populous city in each California county...

--- 

`r flipbookr::chunq_reveal("dplyr", title = "##sf and dplyr", widths = c(40,60,0))`

```{r dplyr, include = FALSE}
cities_sf |> 
  filter(state_name == "Colorado") |> 
  group_by(county_name) |> 
  slice_max(population, n = 1) -> 
  co_cities
```

---

## Plotting

We've already seen that `ggplot()` is a powerful visualization tool:

--

The 5 steps we described for building a ggplot are:
  1. canvas
  2. layers (geoms)
  3. labels
  4. facets
  5. themes

--
  
spatial work in R is becoming so common that `ggplot()` comes with a sf geom (`geom_sf`)

---

`r flipbookr::chunq_reveal("ggplot", title = "##sf an ggplot", widths = c(60,40,0))`

```{r ggplot, include = FALSE}
ggplot() + 
  geom_sf(data = co, aes(fill = aland/1e10)) + 
  geom_sf(data = co_cities, aes(size = population/1e5), col = "red") + 
  theme_linedraw() + 
  labs(title = "California Counties: Land Area",
       size = "Population \n(100,000)",
       fill = "Acres \n(billions)")
```


